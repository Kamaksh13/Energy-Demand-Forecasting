import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#Loading_Data
data = pd.read_csv('TimeSeries_TotalSolarGen_and_Load_IT_2016.csv')
data.head()

import matplotlib.pyplot as plt
data['utc_timestamp'] = pd.to_datetime(data['utc_timestamp'])

#Potting_Data
plt.figure(figsize=(14,6))

plt.plot(data['utc_timestamp'], data['IT_load_new'], label='Load')
plt.plot(data['utc_timestamp'], data['IT_solar_generation'], label='Solar Generation')
plt.xlabel('Time')
plt.ylabel('Value')
plt.legend()
plt.title('Load and Solar Generation over Time')
plt.show()

import matplotlib.pyplot as plt

data['utc_timestamp'] = pd.to_datetime(data['utc_timestamp'])

plt.figure(figsize=(14,6))

#plt.plot(data['utc_timestamp'], data['IT_load_new'], label='Load')
plt.plot(data['utc_timestamp'], data['IT_solar_generation'], label='Solar Generation')
plt.xlabel('Time')
plt.ylabel('Value')
plt.legend()
plt.title('Load and Solar Generation over Time')
plt.show()

#Checking_missing_values
data.isnull().sum()

#Filling_misssing_values_using_Forward_Fill
data['IT_load_new'].fillna(method='ffill', inplace=True)


print("Missing values after filling:")
print(data.isnull().sum())

from statsmodels.tsa.stattools import adfuller

#Function_to _perform_ADF_test

def adf_test(timeseries):
    print ('Results of Dickey-Fuller Test:')
    dftest = adfuller(timeseries, autolag='AIC')
    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])
    for key,value in dftest[4].items():
       dfoutput['Critical Value (%s)'%key] = value
    print (dfoutput)

print("\nADF test for 'IT_load_new' after filling missing values:")
adf_test(data['IT_load_new'])

print("\nADF test for 'IT_solar_generation':")
adf_test(data['IT_solar_generation'])

print("ADF test for 'IT_load_new':")
adf_test(data['IT_load_new'])

print("\nADF test for 'IT_solar_generation':")
adf_test(data['IT_solar_generation'])

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

#Plot_ACF_and_PACF
fig, (ax1, ax2) = plt.subplots(2,1, figsize=(12,8))
plot_acf(data['IT_load_new'], lags=50, zero=False, ax=ax1)
plot_pacf(data['IT_load_new'], lags=50, zero=False, ax=ax2)
plt.show()

from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
from math import sqrt

train_size = int(len(data['IT_load_new']) * 0.8)
train, test = data['IT_load_new'][:train_size], data['IT_load_new'][train_size:]


#Fitting_ARIMA_model
model = ARIMA(train, order=(2,0,2))
model_fit = model.fit()

predictions = model_fit.predict(start=len(train), end=len(train)+len(test)-1)

rmse = sqrt(mean_squared_error(test, predictions))
rmse


model2 = ARIMA(train, order=(2,1,2))
model_fit2 = model2.fit()

predictions2 = model_fit2.predict(start=len(train), end=len(train)+len(test)-1)

rmse2 = sqrt(mean_squared_error(test, predictions2))
rmse2


model3 = ARIMA(train, order=(2,2,2))
model_fit3 = model2.fit()

predictions3 = model_fit3.predict(start=len(train), end=len(train)+len(test)-1)

rmse3 = sqrt(mean_squared_error(test, predictions3))
rmse3


#Plotting_actua_vs_predicted_values
plt.figure(figsize=(14,6))
plt.plot(data['utc_timestamp'][train_size:], test, label='Actual')
plt.plot(data['utc_timestamp'][train_size:], predictions, label='Predicted')
plt.xlabel('Time')
plt.ylabel('Value')
plt.legend()
plt.title('Actual vs Predicted Load Values')
plt.show()

fig, (ax1, ax2) = plt.subplots(2,1, figsize=(12,8))
plot_acf(data['IT_solar_generation'], lags=50, zero=False, ax=ax1)
plot_pacf(data['IT_solar_generation'], lags=50, zero=False, ax=ax2)
plt.show()

from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
from math import sqrt

train_size = int(len(data['IT_solar_generation']) * 0.8)
train, test = data['IT_solar_generation'][:train_size], data['IT_solar_generation'][train_size:]

model = ARIMA(train, order=(2,0,2))
model_fit = model.fit()

predictions = model_fit.predict(start=len(train), end=len(train)+len(test)-1)

rmse = sqrt(mean_squared_error(test, predictions))
rmse

plt.figure(figsize=(14,6))
plt.plot(data['utc_timestamp'][train_size:], test, label='Actual')
plt.plot(data['utc_timestamp'][train_size:], predictions, label='Predicted')
plt.xlabel('Time')
plt.ylabel('Value')
plt.legend()
plt.title('Actual vs Predicted Load Values')
plt.show()








